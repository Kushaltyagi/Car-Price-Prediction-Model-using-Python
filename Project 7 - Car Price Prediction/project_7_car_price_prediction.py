# -*- coding: utf-8 -*-
"""Project 7 - Car Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rZIm5u5v1Sp-zQ4eDR5_h_Dr0CDAIYrS

Importing Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""Data Collection"""

# loading data from csv to pandas DataFrame
car_dataset = pd.read_csv('/content/car data.csv')
car_dataset.head()

car_dataset.shape

# getting some information about dataset
car_dataset.info()

# checking for missing values
car_dataset.isnull().sum()

car_dataset.describe()

# checking distribution of categorical data
print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

# replacing textual value with numerical values
car_dataset.replace({'Fuel_Type': {'Petrol': 0, 'Diesel': 1, 'CNG': 2},
                     'Seller_Type': {'Dealer': 0, 'Individual': 1},
                     'Transmission': {'Manual': 0, 'Automatic': 1}}, inplace = True)

car_dataset.head()

"""Splitting Training and Test Data"""

X = car_dataset.drop(columns = ['Car_Name', 'Selling_Price'], axis = 1)
Y = car_dataset['Selling_Price']

print(X)
print(Y)

# separating training and test data
 X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, random_state = 2)

 print(X.shape, X_train.shape, X_test.shape)

"""Model Training:

Liner Regression
"""

# loading linear regression model
lin_reg = LinearRegression()

lin_reg.fit(X_train, Y_train)

"""Model Evaluation"""

# prediction on training data
training_data_prediction = lin_reg.predict(X_train)
accuracy_training_data = metrics.r2_score(Y_train, training_data_prediction)

print("R squared Error of training data : ", accuracy_training_data)

"""Visualize the actual prices and predicted prices"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# Evaluating model on test data
testing_data_prediction = lin_reg.predict(X_test)
accuracy_testing_data = metrics.r2_score(Y_test, testing_data_prediction)

print("R squared Error of test data : ", accuracy_testing_data)

plt.scatter(Y_test, testing_data_prediction)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

"""Lasso Regression"""

lasso_model = Lasso()

lasso_model.fit(X_train, Y_train)

"""Model Evaluation for Lasso Model

"""

# prediction on training data
lasso_training_data_prediction = lasso_model.predict(X_train)
lasso_accuracy_training_data = metrics.r2_score(Y_train, lasso_training_data_prediction)

print("R squared Error of training data for Lasso : ", lasso_accuracy_training_data)

# Evaluating model on test data
lasso_testing_data_prediction = lasso_model.predict(X_test)
lasso_accuracy_testing_data = metrics.r2_score(Y_test, lasso_testing_data_prediction)

print("R squared Error of test data for Lasso Model: ", lasso_accuracy_testing_data)

plt.scatter(Y_test, lasso_testing_data_prediction)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

